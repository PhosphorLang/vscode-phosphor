{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Phosphor",
    "scopeName": "source.ph",
    "patterns": [
        {
            "include": "#function-declaration"
        },
        {
            "include": "#function-modifiers"
        }
    ],
    "repository": {
        "function-modifiers": {
            "name": "storage.modifier.external.ph",
            "match": "\\b(external)\\b"
        },
        "function-declaration": {
            "begin": "\\bfunction\\b",
            "beginCaptures": {
                "0": {
                    "name": "keyword.other.function.ph"
                }
            },
            "end": "(?<=\\}|;)",
            "patterns": [
                {
                    "name": "entity.name.function.ph",
                    "match": "\\b[a-zA-Z_]+\\b"
                },
                {
                    "include": "#function-parameters"
                },
                {
                    "include": "#type-clause"
                },
                {
                    "include": "#section"
                }
            ]
        },
        "function-parameters": {
            "name": "meta.parameter.ph",
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.begin.ph"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.parameters.end.ph"
                }
            },
            "patterns": [
                {
                    "name": "variable.parameter.ph",
                    "match": "\\b[a-zA-Z_]+\\b"
                },
                {
                    "include": "#type-clause"
                },
                {
                    "name": "punctuation.separator.parameter.ph",
                    "match": ","
                }
            ]
        },
        "type-clause": {
            "patterns": [
                {
                    "name": "meta.type.annotation.ph",
                    "begin": ":",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.operator.type.annotation.ph"
                        }
                    },
                    "end": "(?=[,;){])",
                    "patterns": [
                        {
                            "name": "keyword.operator.type.annotation.ph",
                            "match": ":"
                        },
                        {
                            "name": "entity.name.type.ph",
                            "match": "\\b[a-zA-Z_]+\\b"
                        }
                    ]
                }
            ]
        },
        "section": {
            "name": "entity.name.section.ph",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.section.begin.ph"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.section.end.ph"
                }
            },
            "patterns": [
                {
                    "include": "#section"
                },
                {
                    "include": "#keyword"
                },
                {
                    "include": "#boolean"
                },
                {
                    "include": "#function-call"
                },
                {
                    "include": "#variable"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#number"
                }
            ]
        },
        "keyword": {
            "patterns": [
                {
                    "name": "keyword.control.conditional.ph",
                    "match": "\\b(if|else)\\b"
                },
                {
                    "name": "keyword.control.flow.ph",
                    "match": "\\b(return)\\b"
                },
                {
                    "name": "keyword.control.loop.ph",
                    "match": "\\b(while)\\b"
                },
                {
                    "name": "storage.type.ph",
                    "match": "\\b(var)\\b"
                }
            ]
        },
        "function-call": {
            "name": "entity.name.function.ph",
            "match": "\\b[a-zA-Z_]+\\s*(?=\\()"
        },
        "variable": {
            "name": "variable.other.readwrite.ph",
            "match": "\\b[a-zA-Z_]+\\b"
        },
        "string": {
            "name": "string.quoted.single.ph",
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.ph"
                }
            },
            "end": "'",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.ph"
                }
            }
        },
        "number": {
            "patterns": [
                {
                    "name": "constant.numeric.decimal.ph",
                    "match": "[0-9]+"
                }
            ]
        },
        "boolean": {
            "patterns": [
                {
                    "name": "constant.language.boolean.true.ph",
                    "match": "\\b(true)\\b"
                },
                {
                    "name": "constant.language.boolean.false.ph",
                    "match": "\\b(false)\\b"
                }
            ]
        }
    }
}
